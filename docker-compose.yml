version: "3.8"

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-emplea_y_emprende_dev}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-emplea_y_emprende_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - emplea-y-emprende-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - emplea-y-emprende-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    restart: unless-stopped
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - emplea-y-emprende-network

  # MinIO Client for bucket initialization
  mc:
    image: minio/mc:latest
    container_name: minio-client
    depends_on:
      - minio
    environment:
      MC_HOST_local: "http://${MINIO_ROOT_USER:-minioadmin}:${MINIO_ROOT_PASSWORD:-minioadmin}@minio:9000"
    entrypoint: >
      /bin/sh -c "
        sleep 15 &&
        mc alias set local http://minio:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadmin} &&
        mc mb local/uploads local/videos local/images local/documents local/audio local/temp &&
        mc anonymous set public local/uploads &&
        mc anonymous set public local/videos &&
        mc anonymous set public local/images &&
        mc anonymous set public local/documents &&
        mc anonymous set public local/audio &&
        mc anonymous set public local/temp &&
        echo 'âœ… MinIO buckets created successfully' &&
        echo 'Buckets: uploads, videos, images, documents, audio, temp' &&
        tail -f /dev/null
      "
    networks:
      - emplea-y-emprende-network

  # MinIO Initialization Service
  minio-init:
    image: node:20-alpine
    container_name: minio-init
    working_dir: /app
    depends_on:
      - minio
      - mc
    environment:
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_USE_SSL: false
      MINIO_PUBLIC_URL: ${MINIO_PUBLIC_URL:-http://localhost:9000}
    volumes:
      - .:/app
    command: >
      sh -c "
        sleep 20 &&
        echo 'ðŸš€ MinIO initialization complete!' &&
        tail -f /dev/null
      "
    networks:
      - emplea-y-emprende-network


  # Prisma Client Service
  prisma-client:
    image: node:20-alpine
    container_name: prisma-client
    working_dir: /app
    depends_on:
      - db
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-emplea_y_emprende_dev}"
      DIRECT_URL: "postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-emplea_y_emprende_dev}"
      NODE_ENV: ${NODE_ENV:-development}
    volumes:
      - .:/app
    command: >
      sh -c "
        echo 'ðŸ”§ Installing dependencies...' &&
        npm install &&
        echo 'ðŸ“Š Running Prisma migrations...' &&
        npx prisma migrate deploy &&
        echo 'ðŸŒ± Seeding database...' &&
        if [ \"$${NODE_ENV:-development}\" = \"development\" ]; then 
          npx prisma db seed; 
        else 
          echo 'Skipping seed in production'; 
        fi &&
        echo 'âœ… Prisma client setup complete!' &&
        tail -f /dev/null
      "
    networks:
      - emplea-y-emprende-network

  # Prisma Studio Service
  prisma-studio:
    image: node:20-alpine
    container_name: prisma-studio
    working_dir: /app
    depends_on:
      - db
      - prisma-client
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-emplea_y_emprende_dev}"
      NODE_ENV: ${NODE_ENV:-development}
    volumes:
      - .:/app
      - /app/node_modules
    command: >
      sh -c "
        echo 'ðŸ”§ Installing Prisma globally...' &&
        npm install -g prisma &&
        echo 'ðŸŽ¨ Starting Prisma Studio...' &&
        prisma studio --hostname 0.0.0.0 --port 5555
      "
    ports:
      - "5555:5555"
    networks:
      - emplea-y-emprende-network

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  emplea-y-emprende-network:
    driver: bridge
